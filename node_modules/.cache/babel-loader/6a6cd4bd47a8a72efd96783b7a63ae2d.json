{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yogesh\\\\OneDrive\\\\Desktop\\\\ipod\\\\Yogesh-ipod project\\\\src\\\\components\\\\Playing.js\";\nimport React from 'react';\nimport \"../css/Playing.css\";\n\nclass Playing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTime: 0\n    };\n    this.intervalId = \"\";\n  } // logic for updating the current music playbak\n\n\n  componentDidMount() {\n    const {\n      audio\n    } = this.props;\n    this.setState({\n      currentTime: audio.currentTime\n    });\n    this.intervalId = setInterval(() => {\n      this.setState({\n        currentTime: this.props.audio.currentTime\n      });\n    }, 100);\n  } // Clear interval for that same thing\n\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  } // Render playing screen\n\n\n  render() {\n    const {\n      songItems,\n      playing,\n      songIndex,\n      audio,\n      songImgUrl\n    } = this.props;\n    var currentTimeRender = Math.floor(this.state.currentTime / 60) + \":\" + Math.floor(this.state.currentTime % 60);\n    var durationRender = Math.floor(audio.duration / 60) + \":\" + Math.floor(audio.duration % 60);\n    const percentageComplete = {\n      width: this.state.currentTime / audio.duration * 100 + \"%\"\n    };\n\n    if (durationRender === \"NaN:NaN\") {\n      durationRender = \"0:00\";\n    }\n\n    if (Math.floor(this.state.currentTime % 60 < 10)) {\n      currentTimeRender = Math.floor(this.state.currentTime / 60) + \":0\" + Math.floor(this.state.currentTime % 60);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"now-playing-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"song-details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: songImgUrl,\n      alt: \"songImg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }\n    }, songItems[songIndex]), playing && /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"play-pause-nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 37\n      }\n    }, \"Playing\"), !playing && /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"play-pause-nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 38\n      }\n    }, \"Paused\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, currentTimeRender, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"progress\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: percentageComplete,\n      id: \"progress-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }\n    })), durationRender));\n  }\n\n}\n\nexport default Playing;","map":{"version":3,"sources":["C:/Users/Yogesh/OneDrive/Desktop/ipod/Yogesh-ipod project/src/components/Playing.js"],"names":["React","Playing","Component","constructor","props","state","currentTime","intervalId","componentDidMount","audio","setState","setInterval","componentWillUnmount","clearInterval","render","songItems","playing","songIndex","songImgUrl","currentTimeRender","Math","floor","durationRender","duration","percentageComplete","width"],"mappings":"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","sourcesContent":[" import React from 'react';\nimport \"../css/Playing.css\"\n\nclass Playing extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTime: 0,\n        }\n        this.intervalId = \"\";\n\n\n    }\n\n    // logic for updating the current music playbak\n    componentDidMount() {\n        const { audio } = this.props;\n        this.setState({ currentTime: audio.currentTime });\n        this.intervalId = setInterval(() => {\n            this.setState({ currentTime: this.props.audio.currentTime });\n        }, 100);\n    }\n\n    // Clear interval for that same thing\n    componentWillUnmount() {\n        clearInterval(this.intervalId);\n    }\n\n    // Render playing screen\n    render() {\n        const { songItems, playing, songIndex, audio, songImgUrl } = this.props;\n        var currentTimeRender = Math.floor(this.state.currentTime / 60) + \":\" + Math.floor(this.state.currentTime % 60);\n        var durationRender = Math.floor(audio.duration / 60) + \":\" + Math.floor(audio.duration % 60);\n        const percentageComplete = { width: (this.state.currentTime / audio.duration * 100) + \"%\" };\n        if(durationRender===\"NaN:NaN\"){\n            durationRender=\"0:00\";\n        }\n        if(Math.floor(this.state.currentTime%60<10)){\n            currentTimeRender = Math.floor(this.state.currentTime / 60) + \":0\" + Math.floor(this.state.currentTime % 60);\n        }\n        return (\n            <div className=\"now-playing-container\">\n                <div className=\"song-details\">\n                    <img src={songImgUrl} alt=\"songImg\"></img>\n                    <div>\n                        <h6>{songItems[songIndex]}</h6>\n                        {playing && <h4 className=\"play-pause-nav\">Playing</h4>}\n                        {!playing && <h4 className=\"play-pause-nav\">Paused</h4>}\n                    </div>\n                </div>\n                <div className=\"status\">\n                    {currentTimeRender}\n                    <div id=\"progress\">\n                        <div style={percentageComplete} id=\"progress-bar\"></div>\n                    </div>\n                    {durationRender}\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Playing;"]},"metadata":{},"sourceType":"module"}